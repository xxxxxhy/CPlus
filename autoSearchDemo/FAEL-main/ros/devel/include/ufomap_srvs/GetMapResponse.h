// Generated by gencpp from file ufomap_srvs/GetMapResponse.msg
// DO NOT EDIT!


#ifndef UFOMAP_SRVS_MESSAGE_GETMAPRESPONSE_H
#define UFOMAP_SRVS_MESSAGE_GETMAPRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ufomap_msgs/UFOMap.h>

namespace ufomap_srvs
{
template <class ContainerAllocator>
struct GetMapResponse_
{
  typedef GetMapResponse_<ContainerAllocator> Type;

  GetMapResponse_()
    : success(false)
    , map()  {
    }
  GetMapResponse_(const ContainerAllocator& _alloc)
    : success(false)
    , map(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _success_type;
  _success_type success;

   typedef  ::ufomap_msgs::UFOMap_<ContainerAllocator>  _map_type;
  _map_type map;





  typedef boost::shared_ptr< ::ufomap_srvs::GetMapResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ufomap_srvs::GetMapResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetMapResponse_

typedef ::ufomap_srvs::GetMapResponse_<std::allocator<void> > GetMapResponse;

typedef boost::shared_ptr< ::ufomap_srvs::GetMapResponse > GetMapResponsePtr;
typedef boost::shared_ptr< ::ufomap_srvs::GetMapResponse const> GetMapResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ufomap_srvs::GetMapResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ufomap_srvs::GetMapResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ufomap_srvs::GetMapResponse_<ContainerAllocator1> & lhs, const ::ufomap_srvs::GetMapResponse_<ContainerAllocator2> & rhs)
{
  return lhs.success == rhs.success &&
    lhs.map == rhs.map;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ufomap_srvs::GetMapResponse_<ContainerAllocator1> & lhs, const ::ufomap_srvs::GetMapResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ufomap_srvs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ufomap_srvs::GetMapResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ufomap_srvs::GetMapResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ufomap_srvs::GetMapResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ufomap_srvs::GetMapResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ufomap_srvs::GetMapResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ufomap_srvs::GetMapResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ufomap_srvs::GetMapResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5523f510c9f1d0087bc32c1fd47d10b3";
  }

  static const char* value(const ::ufomap_srvs::GetMapResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5523f510c9f1d008ULL;
  static const uint64_t static_value2 = 0x7bc32c1fd47d10b3ULL;
};

template<class ContainerAllocator>
struct DataType< ::ufomap_srvs::GetMapResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ufomap_srvs/GetMapResponse";
  }

  static const char* value(const ::ufomap_srvs::GetMapResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ufomap_srvs::GetMapResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# If it was successful\n"
"bool success\n"
"# The map to be returned\n"
"ufomap_msgs/UFOMap map\n"
"\n"
"\n"
"================================================================================\n"
"MSG: ufomap_msgs/UFOMap\n"
"# A 3D map in binary format, as Octree\n"
"ufomap_msgs/UFOMapMetaData info\n"
"\n"
"# Binary serialization of Octree, use conversions.h to read and write octrees\n"
"int8[] data\n"
"================================================================================\n"
"MSG: ufomap_msgs/UFOMapMetaData\n"
"# File version used\n"
"string version\n"
"\n"
"# Class id of the contained Octree\n"
"string id\n"
"\n"
"# Resolution (in m) of the octree leaf nodes\n"
"float64 resolution\n"
"\n"
"# Number of depth levels\n"
"uint8 depth_levels\n"
"\n"
"# If data is compressed\n"
"bool compressed\n"
"\n"
"# Size of data uncompressed\n"
"int32 uncompressed_data_size\n"
"\n"
"# Bounding volume\n"
"ufomap_msgs/BoundingVolume bounding_volume\n"
"================================================================================\n"
"MSG: ufomap_msgs/BoundingVolume\n"
"ufomap_msgs/AABB[] aabbs\n"
"\n"
"# ufomap_msgs/Capsule[] capsules\n"
"\n"
"# ufomap_msgs/Cone[] cones\n"
"\n"
"# ufomap_msgs/Cylinder[] cylinders\n"
"\n"
"# ufomap_msgs/Ellipsoid[] ellipsoids\n"
"\n"
"ufomap_msgs/Frustum[] frustums\n"
"\n"
"ufomap_msgs/LineSegment[] line_segments\n"
"\n"
"ufomap_msgs/OBB[] obbs\n"
"\n"
"ufomap_msgs/Plane[] planes\n"
"\n"
"ufomap_msgs/Point[] points\n"
"\n"
"ufomap_msgs/Ray[] rays\n"
"\n"
"ufomap_msgs/Sphere[] spheres\n"
"\n"
"# ufomap_msgs/Triangle[] triangles\n"
"================================================================================\n"
"MSG: ufomap_msgs/AABB\n"
"ufomap_msgs/Point center\n"
"\n"
"ufomap_msgs/Point half_size\n"
"================================================================================\n"
"MSG: ufomap_msgs/Point\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: ufomap_msgs/Frustum\n"
"ufomap_msgs/Plane[6] planes\n"
"================================================================================\n"
"MSG: ufomap_msgs/Plane\n"
"ufomap_msgs/Point normal\n"
"\n"
"float64 distance\n"
"================================================================================\n"
"MSG: ufomap_msgs/LineSegment\n"
"ufomap_msgs/Point start\n"
"\n"
"ufomap_msgs/Point end\n"
"================================================================================\n"
"MSG: ufomap_msgs/OBB\n"
"ufomap_msgs/Point center\n"
"\n"
"ufomap_msgs/Point half_size\n"
"\n"
"ufomap_msgs/Point rotation\n"
"================================================================================\n"
"MSG: ufomap_msgs/Ray\n"
"ufomap_msgs/Point origin\n"
"\n"
"ufomap_msgs/Point direction\n"
"================================================================================\n"
"MSG: ufomap_msgs/Sphere\n"
"ufomap_msgs/Point center\n"
"\n"
"float64 radius\n"
;
  }

  static const char* value(const ::ufomap_srvs::GetMapResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ufomap_srvs::GetMapResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.success);
      stream.next(m.map);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetMapResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ufomap_srvs::GetMapResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ufomap_srvs::GetMapResponse_<ContainerAllocator>& v)
  {
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "map: ";
    s << std::endl;
    Printer< ::ufomap_msgs::UFOMap_<ContainerAllocator> >::stream(s, indent + "  ", v.map);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UFOMAP_SRVS_MESSAGE_GETMAPRESPONSE_H
