// Generated by gencpp from file ufomap_manager/UfomapWithFrontiers.msg
// DO NOT EDIT!


#ifndef UFOMAP_MANAGER_MESSAGE_UFOMAPWITHFRONTIERS_H
#define UFOMAP_MANAGER_MESSAGE_UFOMAPWITHFRONTIERS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ufomap_msgs/UFOMap.h>
#include <ufomap_manager/CellCode.h>
#include <ufomap_manager/CellCode.h>
#include <ufomap_manager/CellCode.h>
#include <ufomap_manager/CellCode.h>

namespace ufomap_manager
{
template <class ContainerAllocator>
struct UfomapWithFrontiers_
{
  typedef UfomapWithFrontiers_<ContainerAllocator> Type;

  UfomapWithFrontiers_()
    : header()
    , ufomap()
    , local_frontiers()
    , global_frontiers()
    , changed_cell_codes()
    , known_cell_codes()
    , frame_id()
    , robot_base_frame_id()
    , robot_height(0.0)
    , robot_bottom(0.0)
    , robot_radius(0.0)
    , max_range(0.0)
    , known_plane_cell_num(0)  {
    }
  UfomapWithFrontiers_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , ufomap(_alloc)
    , local_frontiers(_alloc)
    , global_frontiers(_alloc)
    , changed_cell_codes(_alloc)
    , known_cell_codes(_alloc)
    , frame_id(_alloc)
    , robot_base_frame_id(_alloc)
    , robot_height(0.0)
    , robot_bottom(0.0)
    , robot_radius(0.0)
    , max_range(0.0)
    , known_plane_cell_num(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::ufomap_msgs::UFOMap_<ContainerAllocator>  _ufomap_type;
  _ufomap_type ufomap;

   typedef std::vector< ::ufomap_manager::CellCode_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ufomap_manager::CellCode_<ContainerAllocator> >> _local_frontiers_type;
  _local_frontiers_type local_frontiers;

   typedef std::vector< ::ufomap_manager::CellCode_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ufomap_manager::CellCode_<ContainerAllocator> >> _global_frontiers_type;
  _global_frontiers_type global_frontiers;

   typedef std::vector< ::ufomap_manager::CellCode_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ufomap_manager::CellCode_<ContainerAllocator> >> _changed_cell_codes_type;
  _changed_cell_codes_type changed_cell_codes;

   typedef std::vector< ::ufomap_manager::CellCode_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::ufomap_manager::CellCode_<ContainerAllocator> >> _known_cell_codes_type;
  _known_cell_codes_type known_cell_codes;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _frame_id_type;
  _frame_id_type frame_id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _robot_base_frame_id_type;
  _robot_base_frame_id_type robot_base_frame_id;

   typedef double _robot_height_type;
  _robot_height_type robot_height;

   typedef double _robot_bottom_type;
  _robot_bottom_type robot_bottom;

   typedef double _robot_radius_type;
  _robot_radius_type robot_radius;

   typedef double _max_range_type;
  _max_range_type max_range;

   typedef uint32_t _known_plane_cell_num_type;
  _known_plane_cell_num_type known_plane_cell_num;





  typedef boost::shared_ptr< ::ufomap_manager::UfomapWithFrontiers_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ufomap_manager::UfomapWithFrontiers_<ContainerAllocator> const> ConstPtr;

}; // struct UfomapWithFrontiers_

typedef ::ufomap_manager::UfomapWithFrontiers_<std::allocator<void> > UfomapWithFrontiers;

typedef boost::shared_ptr< ::ufomap_manager::UfomapWithFrontiers > UfomapWithFrontiersPtr;
typedef boost::shared_ptr< ::ufomap_manager::UfomapWithFrontiers const> UfomapWithFrontiersConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ufomap_manager::UfomapWithFrontiers_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ufomap_manager::UfomapWithFrontiers_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ufomap_manager::UfomapWithFrontiers_<ContainerAllocator1> & lhs, const ::ufomap_manager::UfomapWithFrontiers_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.ufomap == rhs.ufomap &&
    lhs.local_frontiers == rhs.local_frontiers &&
    lhs.global_frontiers == rhs.global_frontiers &&
    lhs.changed_cell_codes == rhs.changed_cell_codes &&
    lhs.known_cell_codes == rhs.known_cell_codes &&
    lhs.frame_id == rhs.frame_id &&
    lhs.robot_base_frame_id == rhs.robot_base_frame_id &&
    lhs.robot_height == rhs.robot_height &&
    lhs.robot_bottom == rhs.robot_bottom &&
    lhs.robot_radius == rhs.robot_radius &&
    lhs.max_range == rhs.max_range &&
    lhs.known_plane_cell_num == rhs.known_plane_cell_num;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ufomap_manager::UfomapWithFrontiers_<ContainerAllocator1> & lhs, const ::ufomap_manager::UfomapWithFrontiers_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ufomap_manager

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ufomap_manager::UfomapWithFrontiers_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ufomap_manager::UfomapWithFrontiers_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ufomap_manager::UfomapWithFrontiers_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ufomap_manager::UfomapWithFrontiers_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ufomap_manager::UfomapWithFrontiers_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ufomap_manager::UfomapWithFrontiers_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ufomap_manager::UfomapWithFrontiers_<ContainerAllocator> >
{
  static const char* value()
  {
    return "22e13be68b8e1ef450cd96e270be998b";
  }

  static const char* value(const ::ufomap_manager::UfomapWithFrontiers_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x22e13be68b8e1ef4ULL;
  static const uint64_t static_value2 = 0x50cd96e270be998bULL;
};

template<class ContainerAllocator>
struct DataType< ::ufomap_manager::UfomapWithFrontiers_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ufomap_manager/UfomapWithFrontiers";
  }

  static const char* value(const ::ufomap_manager::UfomapWithFrontiers_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ufomap_manager::UfomapWithFrontiers_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"ufomap_msgs/UFOMap  ufomap\n"
"\n"
"#geometry_msgs/Point[] local_frontiers_center\n"
"#geometry_msgs/Point[] global_frontiers_center\n"
"#\n"
"#int32 frontiers_depth\n"
"\n"
"ufomap_manager/CellCode[] local_frontiers\n"
"ufomap_manager/CellCode[] global_frontiers\n"
"ufomap_manager/CellCode[] changed_cell_codes\n"
"ufomap_manager/CellCode[] known_cell_codes\n"
"\n"
"# 构建ufomap时机器人的参数配置\n"
"string frame_id\n"
"string robot_base_frame_id\n"
"float64 robot_height\n"
"float64 robot_bottom\n"
"float64 robot_radius\n"
"float64 max_range\n"
"\n"
"uint32 known_plane_cell_num\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ufomap_msgs/UFOMap\n"
"# A 3D map in binary format, as Octree\n"
"ufomap_msgs/UFOMapMetaData info\n"
"\n"
"# Binary serialization of Octree, use conversions.h to read and write octrees\n"
"int8[] data\n"
"================================================================================\n"
"MSG: ufomap_msgs/UFOMapMetaData\n"
"# File version used\n"
"string version\n"
"\n"
"# Class id of the contained Octree\n"
"string id\n"
"\n"
"# Resolution (in m) of the octree leaf nodes\n"
"float64 resolution\n"
"\n"
"# Number of depth levels\n"
"uint8 depth_levels\n"
"\n"
"# If data is compressed\n"
"bool compressed\n"
"\n"
"# Size of data uncompressed\n"
"int32 uncompressed_data_size\n"
"\n"
"# Bounding volume\n"
"ufomap_msgs/BoundingVolume bounding_volume\n"
"================================================================================\n"
"MSG: ufomap_msgs/BoundingVolume\n"
"ufomap_msgs/AABB[] aabbs\n"
"\n"
"# ufomap_msgs/Capsule[] capsules\n"
"\n"
"# ufomap_msgs/Cone[] cones\n"
"\n"
"# ufomap_msgs/Cylinder[] cylinders\n"
"\n"
"# ufomap_msgs/Ellipsoid[] ellipsoids\n"
"\n"
"ufomap_msgs/Frustum[] frustums\n"
"\n"
"ufomap_msgs/LineSegment[] line_segments\n"
"\n"
"ufomap_msgs/OBB[] obbs\n"
"\n"
"ufomap_msgs/Plane[] planes\n"
"\n"
"ufomap_msgs/Point[] points\n"
"\n"
"ufomap_msgs/Ray[] rays\n"
"\n"
"ufomap_msgs/Sphere[] spheres\n"
"\n"
"# ufomap_msgs/Triangle[] triangles\n"
"================================================================================\n"
"MSG: ufomap_msgs/AABB\n"
"ufomap_msgs/Point center\n"
"\n"
"ufomap_msgs/Point half_size\n"
"================================================================================\n"
"MSG: ufomap_msgs/Point\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: ufomap_msgs/Frustum\n"
"ufomap_msgs/Plane[6] planes\n"
"================================================================================\n"
"MSG: ufomap_msgs/Plane\n"
"ufomap_msgs/Point normal\n"
"\n"
"float64 distance\n"
"================================================================================\n"
"MSG: ufomap_msgs/LineSegment\n"
"ufomap_msgs/Point start\n"
"\n"
"ufomap_msgs/Point end\n"
"================================================================================\n"
"MSG: ufomap_msgs/OBB\n"
"ufomap_msgs/Point center\n"
"\n"
"ufomap_msgs/Point half_size\n"
"\n"
"ufomap_msgs/Point rotation\n"
"================================================================================\n"
"MSG: ufomap_msgs/Ray\n"
"ufomap_msgs/Point origin\n"
"\n"
"ufomap_msgs/Point direction\n"
"================================================================================\n"
"MSG: ufomap_msgs/Sphere\n"
"ufomap_msgs/Point center\n"
"\n"
"float64 radius\n"
"================================================================================\n"
"MSG: ufomap_manager/CellCode\n"
"uint32 depth\n"
"uint64 Code\n"
;
  }

  static const char* value(const ::ufomap_manager::UfomapWithFrontiers_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ufomap_manager::UfomapWithFrontiers_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.ufomap);
      stream.next(m.local_frontiers);
      stream.next(m.global_frontiers);
      stream.next(m.changed_cell_codes);
      stream.next(m.known_cell_codes);
      stream.next(m.frame_id);
      stream.next(m.robot_base_frame_id);
      stream.next(m.robot_height);
      stream.next(m.robot_bottom);
      stream.next(m.robot_radius);
      stream.next(m.max_range);
      stream.next(m.known_plane_cell_num);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UfomapWithFrontiers_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ufomap_manager::UfomapWithFrontiers_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ufomap_manager::UfomapWithFrontiers_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "ufomap: ";
    s << std::endl;
    Printer< ::ufomap_msgs::UFOMap_<ContainerAllocator> >::stream(s, indent + "  ", v.ufomap);
    s << indent << "local_frontiers[]" << std::endl;
    for (size_t i = 0; i < v.local_frontiers.size(); ++i)
    {
      s << indent << "  local_frontiers[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ufomap_manager::CellCode_<ContainerAllocator> >::stream(s, indent + "    ", v.local_frontiers[i]);
    }
    s << indent << "global_frontiers[]" << std::endl;
    for (size_t i = 0; i < v.global_frontiers.size(); ++i)
    {
      s << indent << "  global_frontiers[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ufomap_manager::CellCode_<ContainerAllocator> >::stream(s, indent + "    ", v.global_frontiers[i]);
    }
    s << indent << "changed_cell_codes[]" << std::endl;
    for (size_t i = 0; i < v.changed_cell_codes.size(); ++i)
    {
      s << indent << "  changed_cell_codes[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ufomap_manager::CellCode_<ContainerAllocator> >::stream(s, indent + "    ", v.changed_cell_codes[i]);
    }
    s << indent << "known_cell_codes[]" << std::endl;
    for (size_t i = 0; i < v.known_cell_codes.size(); ++i)
    {
      s << indent << "  known_cell_codes[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::ufomap_manager::CellCode_<ContainerAllocator> >::stream(s, indent + "    ", v.known_cell_codes[i]);
    }
    s << indent << "frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.frame_id);
    s << indent << "robot_base_frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.robot_base_frame_id);
    s << indent << "robot_height: ";
    Printer<double>::stream(s, indent + "  ", v.robot_height);
    s << indent << "robot_bottom: ";
    Printer<double>::stream(s, indent + "  ", v.robot_bottom);
    s << indent << "robot_radius: ";
    Printer<double>::stream(s, indent + "  ", v.robot_radius);
    s << indent << "max_range: ";
    Printer<double>::stream(s, indent + "  ", v.max_range);
    s << indent << "known_plane_cell_num: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.known_plane_cell_num);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UFOMAP_MANAGER_MESSAGE_UFOMAPWITHFRONTIERS_H
