// Generated by gencpp from file planner/RoadMapMsg.msg
// DO NOT EDIT!


#ifndef PLANNER_MESSAGE_ROADMAPMSG_H
#define PLANNER_MESSAGE_ROADMAPMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <planner/IdPointPair.h>
#include <planner/EdgePair.h>

namespace planner
{
template <class ContainerAllocator>
struct RoadMapMsg_
{
  typedef RoadMapMsg_<ContainerAllocator> Type;

  RoadMapMsg_()
    : id_point_pair_list()
    , edge_pair_list()  {
    }
  RoadMapMsg_(const ContainerAllocator& _alloc)
    : id_point_pair_list(_alloc)
    , edge_pair_list(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::planner::IdPointPair_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::planner::IdPointPair_<ContainerAllocator> >> _id_point_pair_list_type;
  _id_point_pair_list_type id_point_pair_list;

   typedef std::vector< ::planner::EdgePair_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::planner::EdgePair_<ContainerAllocator> >> _edge_pair_list_type;
  _edge_pair_list_type edge_pair_list;





  typedef boost::shared_ptr< ::planner::RoadMapMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::planner::RoadMapMsg_<ContainerAllocator> const> ConstPtr;

}; // struct RoadMapMsg_

typedef ::planner::RoadMapMsg_<std::allocator<void> > RoadMapMsg;

typedef boost::shared_ptr< ::planner::RoadMapMsg > RoadMapMsgPtr;
typedef boost::shared_ptr< ::planner::RoadMapMsg const> RoadMapMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::planner::RoadMapMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::planner::RoadMapMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::planner::RoadMapMsg_<ContainerAllocator1> & lhs, const ::planner::RoadMapMsg_<ContainerAllocator2> & rhs)
{
  return lhs.id_point_pair_list == rhs.id_point_pair_list &&
    lhs.edge_pair_list == rhs.edge_pair_list;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::planner::RoadMapMsg_<ContainerAllocator1> & lhs, const ::planner::RoadMapMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace planner

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::planner::RoadMapMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planner::RoadMapMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planner::RoadMapMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planner::RoadMapMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planner::RoadMapMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planner::RoadMapMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::planner::RoadMapMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "29d560d0f11813d6df50b9dbb4c10ec2";
  }

  static const char* value(const ::planner::RoadMapMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x29d560d0f11813d6ULL;
  static const uint64_t static_value2 = 0xdf50b9dbb4c10ec2ULL;
};

template<class ContainerAllocator>
struct DataType< ::planner::RoadMapMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "planner/RoadMapMsg";
  }

  static const char* value(const ::planner::RoadMapMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::planner::RoadMapMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"IdPointPair[] id_point_pair_list\n"
"EdgePair[] edge_pair_list\n"
"================================================================================\n"
"MSG: planner/IdPointPair\n"
"int32 id\n"
"geometry_msgs/Point point\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: planner/EdgePair\n"
"\n"
"int32 edge_id\n"
"IdPointPair begin_point\n"
"IdPointPair end_point\n"
;
  }

  static const char* value(const ::planner::RoadMapMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::planner::RoadMapMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id_point_pair_list);
      stream.next(m.edge_pair_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RoadMapMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::planner::RoadMapMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::planner::RoadMapMsg_<ContainerAllocator>& v)
  {
    s << indent << "id_point_pair_list[]" << std::endl;
    for (size_t i = 0; i < v.id_point_pair_list.size(); ++i)
    {
      s << indent << "  id_point_pair_list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::planner::IdPointPair_<ContainerAllocator> >::stream(s, indent + "    ", v.id_point_pair_list[i]);
    }
    s << indent << "edge_pair_list[]" << std::endl;
    for (size_t i = 0; i < v.edge_pair_list.size(); ++i)
    {
      s << indent << "  edge_pair_list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::planner::EdgePair_<ContainerAllocator> >::stream(s, indent + "    ", v.edge_pair_list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLANNER_MESSAGE_ROADMAPMSG_H
