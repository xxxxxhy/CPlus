// Generated by gencpp from file control_planner_interface/VehicleExecuteResult.msg
// DO NOT EDIT!


#ifndef CONTROL_PLANNER_INTERFACE_MESSAGE_VEHICLEEXECUTERESULT_H
#define CONTROL_PLANNER_INTERFACE_MESSAGE_VEHICLEEXECUTERESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace control_planner_interface
{
template <class ContainerAllocator>
struct VehicleExecuteResult_
{
  typedef VehicleExecuteResult_<ContainerAllocator> Type;

  VehicleExecuteResult_()
    : finish(false)  {
    }
  VehicleExecuteResult_(const ContainerAllocator& _alloc)
    : finish(false)  {
  (void)_alloc;
    }



   typedef uint8_t _finish_type;
  _finish_type finish;





  typedef boost::shared_ptr< ::control_planner_interface::VehicleExecuteResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::control_planner_interface::VehicleExecuteResult_<ContainerAllocator> const> ConstPtr;

}; // struct VehicleExecuteResult_

typedef ::control_planner_interface::VehicleExecuteResult_<std::allocator<void> > VehicleExecuteResult;

typedef boost::shared_ptr< ::control_planner_interface::VehicleExecuteResult > VehicleExecuteResultPtr;
typedef boost::shared_ptr< ::control_planner_interface::VehicleExecuteResult const> VehicleExecuteResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::control_planner_interface::VehicleExecuteResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::control_planner_interface::VehicleExecuteResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::control_planner_interface::VehicleExecuteResult_<ContainerAllocator1> & lhs, const ::control_planner_interface::VehicleExecuteResult_<ContainerAllocator2> & rhs)
{
  return lhs.finish == rhs.finish;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::control_planner_interface::VehicleExecuteResult_<ContainerAllocator1> & lhs, const ::control_planner_interface::VehicleExecuteResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace control_planner_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::control_planner_interface::VehicleExecuteResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::control_planner_interface::VehicleExecuteResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control_planner_interface::VehicleExecuteResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control_planner_interface::VehicleExecuteResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_planner_interface::VehicleExecuteResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_planner_interface::VehicleExecuteResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::control_planner_interface::VehicleExecuteResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "474a58dbb494a45bb1ca99544cd64e45";
  }

  static const char* value(const ::control_planner_interface::VehicleExecuteResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x474a58dbb494a45bULL;
  static const uint64_t static_value2 = 0xb1ca99544cd64e45ULL;
};

template<class ContainerAllocator>
struct DataType< ::control_planner_interface::VehicleExecuteResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "control_planner_interface/VehicleExecuteResult";
  }

  static const char* value(const ::control_planner_interface::VehicleExecuteResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::control_planner_interface::VehicleExecuteResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"bool finish\n"
"\n"
;
  }

  static const char* value(const ::control_planner_interface::VehicleExecuteResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::control_planner_interface::VehicleExecuteResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.finish);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VehicleExecuteResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::control_planner_interface::VehicleExecuteResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::control_planner_interface::VehicleExecuteResult_<ContainerAllocator>& v)
  {
    s << indent << "finish: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.finish);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROL_PLANNER_INTERFACE_MESSAGE_VEHICLEEXECUTERESULT_H
