// Generated by gencpp from file control_planner_interface/VehicleExecuteFeedback.msg
// DO NOT EDIT!


#ifndef CONTROL_PLANNER_INTERFACE_MESSAGE_VEHICLEEXECUTEFEEDBACK_H
#define CONTROL_PLANNER_INTERFACE_MESSAGE_VEHICLEEXECUTEFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace control_planner_interface
{
template <class ContainerAllocator>
struct VehicleExecuteFeedback_
{
  typedef VehicleExecuteFeedback_<ContainerAllocator> Type;

  VehicleExecuteFeedback_()
    : current_pose()
    , current_waypoint_id(0)  {
    }
  VehicleExecuteFeedback_(const ContainerAllocator& _alloc)
    : current_pose(_alloc)
    , current_waypoint_id(0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _current_pose_type;
  _current_pose_type current_pose;

   typedef int32_t _current_waypoint_id_type;
  _current_waypoint_id_type current_waypoint_id;





  typedef boost::shared_ptr< ::control_planner_interface::VehicleExecuteFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::control_planner_interface::VehicleExecuteFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct VehicleExecuteFeedback_

typedef ::control_planner_interface::VehicleExecuteFeedback_<std::allocator<void> > VehicleExecuteFeedback;

typedef boost::shared_ptr< ::control_planner_interface::VehicleExecuteFeedback > VehicleExecuteFeedbackPtr;
typedef boost::shared_ptr< ::control_planner_interface::VehicleExecuteFeedback const> VehicleExecuteFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::control_planner_interface::VehicleExecuteFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::control_planner_interface::VehicleExecuteFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::control_planner_interface::VehicleExecuteFeedback_<ContainerAllocator1> & lhs, const ::control_planner_interface::VehicleExecuteFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.current_pose == rhs.current_pose &&
    lhs.current_waypoint_id == rhs.current_waypoint_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::control_planner_interface::VehicleExecuteFeedback_<ContainerAllocator1> & lhs, const ::control_planner_interface::VehicleExecuteFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace control_planner_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::control_planner_interface::VehicleExecuteFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::control_planner_interface::VehicleExecuteFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control_planner_interface::VehicleExecuteFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control_planner_interface::VehicleExecuteFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_planner_interface::VehicleExecuteFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_planner_interface::VehicleExecuteFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::control_planner_interface::VehicleExecuteFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "876bb834d9995988ee51b35cdd9375fc";
  }

  static const char* value(const ::control_planner_interface::VehicleExecuteFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x876bb834d9995988ULL;
  static const uint64_t static_value2 = 0xee51b35cdd9375fcULL;
};

template<class ContainerAllocator>
struct DataType< ::control_planner_interface::VehicleExecuteFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "control_planner_interface/VehicleExecuteFeedback";
  }

  static const char* value(const ::control_planner_interface::VehicleExecuteFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::control_planner_interface::VehicleExecuteFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"geometry_msgs/Pose current_pose\n"
"int32 current_waypoint_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::control_planner_interface::VehicleExecuteFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::control_planner_interface::VehicleExecuteFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.current_pose);
      stream.next(m.current_waypoint_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VehicleExecuteFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::control_planner_interface::VehicleExecuteFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::control_planner_interface::VehicleExecuteFeedback_<ContainerAllocator>& v)
  {
    s << indent << "current_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.current_pose);
    s << indent << "current_waypoint_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.current_waypoint_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROL_PLANNER_INTERFACE_MESSAGE_VEHICLEEXECUTEFEEDBACK_H
