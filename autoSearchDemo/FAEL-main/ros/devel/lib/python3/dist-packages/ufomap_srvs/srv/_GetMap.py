# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ufomap_srvs/GetMapRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ufomap_msgs.msg

class GetMapRequest(genpy.Message):
  _md5sum = "283deba7c9e328b954a502b944947b13"
  _type = "ufomap_srvs/GetMapRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Get the complete map at a specified depth

# The depth of the map to return
uint8 depth
# If the message should be compressed
bool compress
# Bounding volume of which part of the map should be returned
ufomap_msgs/BoundingVolume bounding_volume

================================================================================
MSG: ufomap_msgs/BoundingVolume
ufomap_msgs/AABB[] aabbs

# ufomap_msgs/Capsule[] capsules

# ufomap_msgs/Cone[] cones

# ufomap_msgs/Cylinder[] cylinders

# ufomap_msgs/Ellipsoid[] ellipsoids

ufomap_msgs/Frustum[] frustums

ufomap_msgs/LineSegment[] line_segments

ufomap_msgs/OBB[] obbs

ufomap_msgs/Plane[] planes

ufomap_msgs/Point[] points

ufomap_msgs/Ray[] rays

ufomap_msgs/Sphere[] spheres

# ufomap_msgs/Triangle[] triangles
================================================================================
MSG: ufomap_msgs/AABB
ufomap_msgs/Point center

ufomap_msgs/Point half_size
================================================================================
MSG: ufomap_msgs/Point
float64 x
float64 y
float64 z
================================================================================
MSG: ufomap_msgs/Frustum
ufomap_msgs/Plane[6] planes
================================================================================
MSG: ufomap_msgs/Plane
ufomap_msgs/Point normal

float64 distance
================================================================================
MSG: ufomap_msgs/LineSegment
ufomap_msgs/Point start

ufomap_msgs/Point end
================================================================================
MSG: ufomap_msgs/OBB
ufomap_msgs/Point center

ufomap_msgs/Point half_size

ufomap_msgs/Point rotation
================================================================================
MSG: ufomap_msgs/Ray
ufomap_msgs/Point origin

ufomap_msgs/Point direction
================================================================================
MSG: ufomap_msgs/Sphere
ufomap_msgs/Point center

float64 radius"""
  __slots__ = ['depth','compress','bounding_volume']
  _slot_types = ['uint8','bool','ufomap_msgs/BoundingVolume']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       depth,compress,bounding_volume

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetMapRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.depth is None:
        self.depth = 0
      if self.compress is None:
        self.compress = False
      if self.bounding_volume is None:
        self.bounding_volume = ufomap_msgs.msg.BoundingVolume()
    else:
      self.depth = 0
      self.compress = False
      self.bounding_volume = ufomap_msgs.msg.BoundingVolume()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2B().pack(_x.depth, _x.compress))
      length = len(self.bounding_volume.aabbs)
      buff.write(_struct_I.pack(length))
      for val1 in self.bounding_volume.aabbs:
        _v1 = val1.center
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v2 = val1.half_size
        _x = _v2
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.bounding_volume.frustums)
      buff.write(_struct_I.pack(length))
      for val1 in self.bounding_volume.frustums:
        if len(val1.planes) != 6:
          self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (6, len(val1.planes), 'val1.planes')))
        for val2 in val1.planes:
          _v3 = val2.normal
          _x = _v3
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = val2.distance
          buff.write(_get_struct_d().pack(_x))
      length = len(self.bounding_volume.line_segments)
      buff.write(_struct_I.pack(length))
      for val1 in self.bounding_volume.line_segments:
        _v4 = val1.start
        _x = _v4
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v5 = val1.end
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.bounding_volume.obbs)
      buff.write(_struct_I.pack(length))
      for val1 in self.bounding_volume.obbs:
        _v6 = val1.center
        _x = _v6
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v7 = val1.half_size
        _x = _v7
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v8 = val1.rotation
        _x = _v8
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.bounding_volume.planes)
      buff.write(_struct_I.pack(length))
      for val1 in self.bounding_volume.planes:
        _v9 = val1.normal
        _x = _v9
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.distance
        buff.write(_get_struct_d().pack(_x))
      length = len(self.bounding_volume.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.bounding_volume.points:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.bounding_volume.rays)
      buff.write(_struct_I.pack(length))
      for val1 in self.bounding_volume.rays:
        _v10 = val1.origin
        _x = _v10
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v11 = val1.direction
        _x = _v11
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.bounding_volume.spheres)
      buff.write(_struct_I.pack(length))
      for val1 in self.bounding_volume.spheres:
        _v12 = val1.center
        _x = _v12
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.radius
        buff.write(_get_struct_d().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.bounding_volume is None:
        self.bounding_volume = ufomap_msgs.msg.BoundingVolume()
      end = 0
      _x = self
      start = end
      end += 2
      (_x.depth, _x.compress,) = _get_struct_2B().unpack(str[start:end])
      self.compress = bool(self.compress)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bounding_volume.aabbs = []
      for i in range(0, length):
        val1 = ufomap_msgs.msg.AABB()
        _v13 = val1.center
        _x = _v13
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v14 = val1.half_size
        _x = _v14
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.bounding_volume.aabbs.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bounding_volume.frustums = []
      for i in range(0, length):
        val1 = ufomap_msgs.msg.Frustum()
        val1.planes = []
        for i in range(0, 6):
          val2 = ufomap_msgs.msg.Plane()
          _v15 = val2.normal
          _x = _v15
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 8
          (val2.distance,) = _get_struct_d().unpack(str[start:end])
          val1.planes.append(val2)
        self.bounding_volume.frustums.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bounding_volume.line_segments = []
      for i in range(0, length):
        val1 = ufomap_msgs.msg.LineSegment()
        _v16 = val1.start
        _x = _v16
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v17 = val1.end
        _x = _v17
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.bounding_volume.line_segments.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bounding_volume.obbs = []
      for i in range(0, length):
        val1 = ufomap_msgs.msg.OBB()
        _v18 = val1.center
        _x = _v18
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v19 = val1.half_size
        _x = _v19
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v20 = val1.rotation
        _x = _v20
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.bounding_volume.obbs.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bounding_volume.planes = []
      for i in range(0, length):
        val1 = ufomap_msgs.msg.Plane()
        _v21 = val1.normal
        _x = _v21
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 8
        (val1.distance,) = _get_struct_d().unpack(str[start:end])
        self.bounding_volume.planes.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bounding_volume.points = []
      for i in range(0, length):
        val1 = ufomap_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.bounding_volume.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bounding_volume.rays = []
      for i in range(0, length):
        val1 = ufomap_msgs.msg.Ray()
        _v22 = val1.origin
        _x = _v22
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v23 = val1.direction
        _x = _v23
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.bounding_volume.rays.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bounding_volume.spheres = []
      for i in range(0, length):
        val1 = ufomap_msgs.msg.Sphere()
        _v24 = val1.center
        _x = _v24
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 8
        (val1.radius,) = _get_struct_d().unpack(str[start:end])
        self.bounding_volume.spheres.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2B().pack(_x.depth, _x.compress))
      length = len(self.bounding_volume.aabbs)
      buff.write(_struct_I.pack(length))
      for val1 in self.bounding_volume.aabbs:
        _v25 = val1.center
        _x = _v25
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v26 = val1.half_size
        _x = _v26
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.bounding_volume.frustums)
      buff.write(_struct_I.pack(length))
      for val1 in self.bounding_volume.frustums:
        if len(val1.planes) != 6:
          self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (6, len(val1.planes), 'val1.planes')))
        for val2 in val1.planes:
          _v27 = val2.normal
          _x = _v27
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = val2.distance
          buff.write(_get_struct_d().pack(_x))
      length = len(self.bounding_volume.line_segments)
      buff.write(_struct_I.pack(length))
      for val1 in self.bounding_volume.line_segments:
        _v28 = val1.start
        _x = _v28
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v29 = val1.end
        _x = _v29
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.bounding_volume.obbs)
      buff.write(_struct_I.pack(length))
      for val1 in self.bounding_volume.obbs:
        _v30 = val1.center
        _x = _v30
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v31 = val1.half_size
        _x = _v31
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v32 = val1.rotation
        _x = _v32
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.bounding_volume.planes)
      buff.write(_struct_I.pack(length))
      for val1 in self.bounding_volume.planes:
        _v33 = val1.normal
        _x = _v33
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.distance
        buff.write(_get_struct_d().pack(_x))
      length = len(self.bounding_volume.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.bounding_volume.points:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.bounding_volume.rays)
      buff.write(_struct_I.pack(length))
      for val1 in self.bounding_volume.rays:
        _v34 = val1.origin
        _x = _v34
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v35 = val1.direction
        _x = _v35
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.bounding_volume.spheres)
      buff.write(_struct_I.pack(length))
      for val1 in self.bounding_volume.spheres:
        _v36 = val1.center
        _x = _v36
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.radius
        buff.write(_get_struct_d().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.bounding_volume is None:
        self.bounding_volume = ufomap_msgs.msg.BoundingVolume()
      end = 0
      _x = self
      start = end
      end += 2
      (_x.depth, _x.compress,) = _get_struct_2B().unpack(str[start:end])
      self.compress = bool(self.compress)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bounding_volume.aabbs = []
      for i in range(0, length):
        val1 = ufomap_msgs.msg.AABB()
        _v37 = val1.center
        _x = _v37
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v38 = val1.half_size
        _x = _v38
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.bounding_volume.aabbs.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bounding_volume.frustums = []
      for i in range(0, length):
        val1 = ufomap_msgs.msg.Frustum()
        val1.planes = []
        for i in range(0, 6):
          val2 = ufomap_msgs.msg.Plane()
          _v39 = val2.normal
          _x = _v39
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 8
          (val2.distance,) = _get_struct_d().unpack(str[start:end])
          val1.planes.append(val2)
        self.bounding_volume.frustums.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bounding_volume.line_segments = []
      for i in range(0, length):
        val1 = ufomap_msgs.msg.LineSegment()
        _v40 = val1.start
        _x = _v40
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v41 = val1.end
        _x = _v41
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.bounding_volume.line_segments.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bounding_volume.obbs = []
      for i in range(0, length):
        val1 = ufomap_msgs.msg.OBB()
        _v42 = val1.center
        _x = _v42
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v43 = val1.half_size
        _x = _v43
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v44 = val1.rotation
        _x = _v44
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.bounding_volume.obbs.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bounding_volume.planes = []
      for i in range(0, length):
        val1 = ufomap_msgs.msg.Plane()
        _v45 = val1.normal
        _x = _v45
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 8
        (val1.distance,) = _get_struct_d().unpack(str[start:end])
        self.bounding_volume.planes.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bounding_volume.points = []
      for i in range(0, length):
        val1 = ufomap_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.bounding_volume.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bounding_volume.rays = []
      for i in range(0, length):
        val1 = ufomap_msgs.msg.Ray()
        _v46 = val1.origin
        _x = _v46
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v47 = val1.direction
        _x = _v47
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.bounding_volume.rays.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bounding_volume.spheres = []
      for i in range(0, length):
        val1 = ufomap_msgs.msg.Sphere()
        _v48 = val1.center
        _x = _v48
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 8
        (val1.radius,) = _get_struct_d().unpack(str[start:end])
        self.bounding_volume.spheres.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ufomap_srvs/GetMapResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ufomap_msgs.msg

class GetMapResponse(genpy.Message):
  _md5sum = "5523f510c9f1d0087bc32c1fd47d10b3"
  _type = "ufomap_srvs/GetMapResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# If it was successful
bool success
# The map to be returned
ufomap_msgs/UFOMap map


================================================================================
MSG: ufomap_msgs/UFOMap
# A 3D map in binary format, as Octree
ufomap_msgs/UFOMapMetaData info

# Binary serialization of Octree, use conversions.h to read and write octrees
int8[] data
================================================================================
MSG: ufomap_msgs/UFOMapMetaData
# File version used
string version

# Class id of the contained Octree
string id

# Resolution (in m) of the octree leaf nodes
float64 resolution

# Number of depth levels
uint8 depth_levels

# If data is compressed
bool compressed

# Size of data uncompressed
int32 uncompressed_data_size

# Bounding volume
ufomap_msgs/BoundingVolume bounding_volume
================================================================================
MSG: ufomap_msgs/BoundingVolume
ufomap_msgs/AABB[] aabbs

# ufomap_msgs/Capsule[] capsules

# ufomap_msgs/Cone[] cones

# ufomap_msgs/Cylinder[] cylinders

# ufomap_msgs/Ellipsoid[] ellipsoids

ufomap_msgs/Frustum[] frustums

ufomap_msgs/LineSegment[] line_segments

ufomap_msgs/OBB[] obbs

ufomap_msgs/Plane[] planes

ufomap_msgs/Point[] points

ufomap_msgs/Ray[] rays

ufomap_msgs/Sphere[] spheres

# ufomap_msgs/Triangle[] triangles
================================================================================
MSG: ufomap_msgs/AABB
ufomap_msgs/Point center

ufomap_msgs/Point half_size
================================================================================
MSG: ufomap_msgs/Point
float64 x
float64 y
float64 z
================================================================================
MSG: ufomap_msgs/Frustum
ufomap_msgs/Plane[6] planes
================================================================================
MSG: ufomap_msgs/Plane
ufomap_msgs/Point normal

float64 distance
================================================================================
MSG: ufomap_msgs/LineSegment
ufomap_msgs/Point start

ufomap_msgs/Point end
================================================================================
MSG: ufomap_msgs/OBB
ufomap_msgs/Point center

ufomap_msgs/Point half_size

ufomap_msgs/Point rotation
================================================================================
MSG: ufomap_msgs/Ray
ufomap_msgs/Point origin

ufomap_msgs/Point direction
================================================================================
MSG: ufomap_msgs/Sphere
ufomap_msgs/Point center

float64 radius"""
  __slots__ = ['success','map']
  _slot_types = ['bool','ufomap_msgs/UFOMap']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success,map

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetMapResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
      if self.map is None:
        self.map = ufomap_msgs.msg.UFOMap()
    else:
      self.success = False
      self.map = ufomap_msgs.msg.UFOMap()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
      _x = self.map.info.version
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.map.info.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_d2Bi().pack(_x.map.info.resolution, _x.map.info.depth_levels, _x.map.info.compressed, _x.map.info.uncompressed_data_size))
      length = len(self.map.info.bounding_volume.aabbs)
      buff.write(_struct_I.pack(length))
      for val1 in self.map.info.bounding_volume.aabbs:
        _v49 = val1.center
        _x = _v49
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v50 = val1.half_size
        _x = _v50
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.map.info.bounding_volume.frustums)
      buff.write(_struct_I.pack(length))
      for val1 in self.map.info.bounding_volume.frustums:
        if len(val1.planes) != 6:
          self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (6, len(val1.planes), 'val1.planes')))
        for val2 in val1.planes:
          _v51 = val2.normal
          _x = _v51
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = val2.distance
          buff.write(_get_struct_d().pack(_x))
      length = len(self.map.info.bounding_volume.line_segments)
      buff.write(_struct_I.pack(length))
      for val1 in self.map.info.bounding_volume.line_segments:
        _v52 = val1.start
        _x = _v52
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v53 = val1.end
        _x = _v53
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.map.info.bounding_volume.obbs)
      buff.write(_struct_I.pack(length))
      for val1 in self.map.info.bounding_volume.obbs:
        _v54 = val1.center
        _x = _v54
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v55 = val1.half_size
        _x = _v55
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v56 = val1.rotation
        _x = _v56
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.map.info.bounding_volume.planes)
      buff.write(_struct_I.pack(length))
      for val1 in self.map.info.bounding_volume.planes:
        _v57 = val1.normal
        _x = _v57
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.distance
        buff.write(_get_struct_d().pack(_x))
      length = len(self.map.info.bounding_volume.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.map.info.bounding_volume.points:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.map.info.bounding_volume.rays)
      buff.write(_struct_I.pack(length))
      for val1 in self.map.info.bounding_volume.rays:
        _v58 = val1.origin
        _x = _v58
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v59 = val1.direction
        _x = _v59
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.map.info.bounding_volume.spheres)
      buff.write(_struct_I.pack(length))
      for val1 in self.map.info.bounding_volume.spheres:
        _v60 = val1.center
        _x = _v60
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.radius
        buff.write(_get_struct_d().pack(_x))
      length = len(self.map.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(struct.Struct(pattern).pack(*self.map.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.map is None:
        self.map = ufomap_msgs.msg.UFOMap()
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.map.info.version = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.map.info.version = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.map.info.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.map.info.id = str[start:end]
      _x = self
      start = end
      end += 14
      (_x.map.info.resolution, _x.map.info.depth_levels, _x.map.info.compressed, _x.map.info.uncompressed_data_size,) = _get_struct_d2Bi().unpack(str[start:end])
      self.map.info.compressed = bool(self.map.info.compressed)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.map.info.bounding_volume.aabbs = []
      for i in range(0, length):
        val1 = ufomap_msgs.msg.AABB()
        _v61 = val1.center
        _x = _v61
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v62 = val1.half_size
        _x = _v62
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.map.info.bounding_volume.aabbs.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.map.info.bounding_volume.frustums = []
      for i in range(0, length):
        val1 = ufomap_msgs.msg.Frustum()
        val1.planes = []
        for i in range(0, 6):
          val2 = ufomap_msgs.msg.Plane()
          _v63 = val2.normal
          _x = _v63
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 8
          (val2.distance,) = _get_struct_d().unpack(str[start:end])
          val1.planes.append(val2)
        self.map.info.bounding_volume.frustums.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.map.info.bounding_volume.line_segments = []
      for i in range(0, length):
        val1 = ufomap_msgs.msg.LineSegment()
        _v64 = val1.start
        _x = _v64
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v65 = val1.end
        _x = _v65
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.map.info.bounding_volume.line_segments.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.map.info.bounding_volume.obbs = []
      for i in range(0, length):
        val1 = ufomap_msgs.msg.OBB()
        _v66 = val1.center
        _x = _v66
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v67 = val1.half_size
        _x = _v67
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v68 = val1.rotation
        _x = _v68
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.map.info.bounding_volume.obbs.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.map.info.bounding_volume.planes = []
      for i in range(0, length):
        val1 = ufomap_msgs.msg.Plane()
        _v69 = val1.normal
        _x = _v69
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 8
        (val1.distance,) = _get_struct_d().unpack(str[start:end])
        self.map.info.bounding_volume.planes.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.map.info.bounding_volume.points = []
      for i in range(0, length):
        val1 = ufomap_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.map.info.bounding_volume.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.map.info.bounding_volume.rays = []
      for i in range(0, length):
        val1 = ufomap_msgs.msg.Ray()
        _v70 = val1.origin
        _x = _v70
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v71 = val1.direction
        _x = _v71
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.map.info.bounding_volume.rays.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.map.info.bounding_volume.spheres = []
      for i in range(0, length):
        val1 = ufomap_msgs.msg.Sphere()
        _v72 = val1.center
        _x = _v72
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 8
        (val1.radius,) = _get_struct_d().unpack(str[start:end])
        self.map.info.bounding_volume.spheres.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.map.data = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
      _x = self.map.info.version
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.map.info.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_d2Bi().pack(_x.map.info.resolution, _x.map.info.depth_levels, _x.map.info.compressed, _x.map.info.uncompressed_data_size))
      length = len(self.map.info.bounding_volume.aabbs)
      buff.write(_struct_I.pack(length))
      for val1 in self.map.info.bounding_volume.aabbs:
        _v73 = val1.center
        _x = _v73
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v74 = val1.half_size
        _x = _v74
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.map.info.bounding_volume.frustums)
      buff.write(_struct_I.pack(length))
      for val1 in self.map.info.bounding_volume.frustums:
        if len(val1.planes) != 6:
          self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (6, len(val1.planes), 'val1.planes')))
        for val2 in val1.planes:
          _v75 = val2.normal
          _x = _v75
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _x = val2.distance
          buff.write(_get_struct_d().pack(_x))
      length = len(self.map.info.bounding_volume.line_segments)
      buff.write(_struct_I.pack(length))
      for val1 in self.map.info.bounding_volume.line_segments:
        _v76 = val1.start
        _x = _v76
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v77 = val1.end
        _x = _v77
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.map.info.bounding_volume.obbs)
      buff.write(_struct_I.pack(length))
      for val1 in self.map.info.bounding_volume.obbs:
        _v78 = val1.center
        _x = _v78
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v79 = val1.half_size
        _x = _v79
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v80 = val1.rotation
        _x = _v80
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.map.info.bounding_volume.planes)
      buff.write(_struct_I.pack(length))
      for val1 in self.map.info.bounding_volume.planes:
        _v81 = val1.normal
        _x = _v81
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.distance
        buff.write(_get_struct_d().pack(_x))
      length = len(self.map.info.bounding_volume.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.map.info.bounding_volume.points:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.map.info.bounding_volume.rays)
      buff.write(_struct_I.pack(length))
      for val1 in self.map.info.bounding_volume.rays:
        _v82 = val1.origin
        _x = _v82
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v83 = val1.direction
        _x = _v83
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.map.info.bounding_volume.spheres)
      buff.write(_struct_I.pack(length))
      for val1 in self.map.info.bounding_volume.spheres:
        _v84 = val1.center
        _x = _v84
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.radius
        buff.write(_get_struct_d().pack(_x))
      length = len(self.map.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(self.map.data.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.map is None:
        self.map = ufomap_msgs.msg.UFOMap()
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.map.info.version = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.map.info.version = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.map.info.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.map.info.id = str[start:end]
      _x = self
      start = end
      end += 14
      (_x.map.info.resolution, _x.map.info.depth_levels, _x.map.info.compressed, _x.map.info.uncompressed_data_size,) = _get_struct_d2Bi().unpack(str[start:end])
      self.map.info.compressed = bool(self.map.info.compressed)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.map.info.bounding_volume.aabbs = []
      for i in range(0, length):
        val1 = ufomap_msgs.msg.AABB()
        _v85 = val1.center
        _x = _v85
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v86 = val1.half_size
        _x = _v86
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.map.info.bounding_volume.aabbs.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.map.info.bounding_volume.frustums = []
      for i in range(0, length):
        val1 = ufomap_msgs.msg.Frustum()
        val1.planes = []
        for i in range(0, 6):
          val2 = ufomap_msgs.msg.Plane()
          _v87 = val2.normal
          _x = _v87
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          start = end
          end += 8
          (val2.distance,) = _get_struct_d().unpack(str[start:end])
          val1.planes.append(val2)
        self.map.info.bounding_volume.frustums.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.map.info.bounding_volume.line_segments = []
      for i in range(0, length):
        val1 = ufomap_msgs.msg.LineSegment()
        _v88 = val1.start
        _x = _v88
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v89 = val1.end
        _x = _v89
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.map.info.bounding_volume.line_segments.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.map.info.bounding_volume.obbs = []
      for i in range(0, length):
        val1 = ufomap_msgs.msg.OBB()
        _v90 = val1.center
        _x = _v90
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v91 = val1.half_size
        _x = _v91
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v92 = val1.rotation
        _x = _v92
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.map.info.bounding_volume.obbs.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.map.info.bounding_volume.planes = []
      for i in range(0, length):
        val1 = ufomap_msgs.msg.Plane()
        _v93 = val1.normal
        _x = _v93
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 8
        (val1.distance,) = _get_struct_d().unpack(str[start:end])
        self.map.info.bounding_volume.planes.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.map.info.bounding_volume.points = []
      for i in range(0, length):
        val1 = ufomap_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.map.info.bounding_volume.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.map.info.bounding_volume.rays = []
      for i in range(0, length):
        val1 = ufomap_msgs.msg.Ray()
        _v94 = val1.origin
        _x = _v94
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v95 = val1.direction
        _x = _v95
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.map.info.bounding_volume.rays.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.map.info.bounding_volume.spheres = []
      for i in range(0, length):
        val1 = ufomap_msgs.msg.Sphere()
        _v96 = val1.center
        _x = _v96
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 8
        (val1.radius,) = _get_struct_d().unpack(str[start:end])
        self.map.info.bounding_volume.spheres.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.map.data = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_d2Bi = None
def _get_struct_d2Bi():
    global _struct_d2Bi
    if _struct_d2Bi is None:
        _struct_d2Bi = struct.Struct("<d2Bi")
    return _struct_d2Bi
class GetMap(object):
  _type          = 'ufomap_srvs/GetMap'
  _md5sum = '47cd0cd4e998ca314e6ccaf9f3b259df'
  _request_class  = GetMapRequest
  _response_class = GetMapResponse
