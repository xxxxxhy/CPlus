// Generated by gencpp from file ufomap_manager/CellCode.msg
// DO NOT EDIT!


#ifndef UFOMAP_MANAGER_MESSAGE_CELLCODE_H
#define UFOMAP_MANAGER_MESSAGE_CELLCODE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ufomap_manager
{
template <class ContainerAllocator>
struct CellCode_
{
  typedef CellCode_<ContainerAllocator> Type;

  CellCode_()
    : depth(0)
    , Code(0)  {
    }
  CellCode_(const ContainerAllocator& _alloc)
    : depth(0)
    , Code(0)  {
  (void)_alloc;
    }



   typedef uint32_t _depth_type;
  _depth_type depth;

   typedef uint64_t _Code_type;
  _Code_type Code;





  typedef boost::shared_ptr< ::ufomap_manager::CellCode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ufomap_manager::CellCode_<ContainerAllocator> const> ConstPtr;

}; // struct CellCode_

typedef ::ufomap_manager::CellCode_<std::allocator<void> > CellCode;

typedef boost::shared_ptr< ::ufomap_manager::CellCode > CellCodePtr;
typedef boost::shared_ptr< ::ufomap_manager::CellCode const> CellCodeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ufomap_manager::CellCode_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ufomap_manager::CellCode_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ufomap_manager::CellCode_<ContainerAllocator1> & lhs, const ::ufomap_manager::CellCode_<ContainerAllocator2> & rhs)
{
  return lhs.depth == rhs.depth &&
    lhs.Code == rhs.Code;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ufomap_manager::CellCode_<ContainerAllocator1> & lhs, const ::ufomap_manager::CellCode_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ufomap_manager

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ufomap_manager::CellCode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ufomap_manager::CellCode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ufomap_manager::CellCode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ufomap_manager::CellCode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ufomap_manager::CellCode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ufomap_manager::CellCode_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ufomap_manager::CellCode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b94fd8468f8b44ebfb1a755ca2d3ecbd";
  }

  static const char* value(const ::ufomap_manager::CellCode_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb94fd8468f8b44ebULL;
  static const uint64_t static_value2 = 0xfb1a755ca2d3ecbdULL;
};

template<class ContainerAllocator>
struct DataType< ::ufomap_manager::CellCode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ufomap_manager/CellCode";
  }

  static const char* value(const ::ufomap_manager::CellCode_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ufomap_manager::CellCode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 depth\n"
"uint64 Code\n"
;
  }

  static const char* value(const ::ufomap_manager::CellCode_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ufomap_manager::CellCode_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.depth);
      stream.next(m.Code);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CellCode_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ufomap_manager::CellCode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ufomap_manager::CellCode_<ContainerAllocator>& v)
  {
    s << indent << "depth: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.depth);
    s << indent << "Code: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.Code);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UFOMAP_MANAGER_MESSAGE_CELLCODE_H
