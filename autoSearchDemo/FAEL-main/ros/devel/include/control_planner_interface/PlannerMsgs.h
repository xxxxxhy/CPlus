// Generated by gencpp from file control_planner_interface/PlannerMsgs.msg
// DO NOT EDIT!


#ifndef CONTROL_PLANNER_INTERFACE_MESSAGE_PLANNERMSGS_H
#define CONTROL_PLANNER_INTERFACE_MESSAGE_PLANNERMSGS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace control_planner_interface
{
template <class ContainerAllocator>
struct PlannerMsgs_
{
  typedef PlannerMsgs_<ContainerAllocator> Type;

  PlannerMsgs_()
    : current_iteration_id(0)
    , current_goal_id(0)
    , is_current_goal_scanned(false)
    , is_exploration_finished(false)  {
    }
  PlannerMsgs_(const ContainerAllocator& _alloc)
    : current_iteration_id(0)
    , current_goal_id(0)
    , is_current_goal_scanned(false)
    , is_exploration_finished(false)  {
  (void)_alloc;
    }



   typedef int32_t _current_iteration_id_type;
  _current_iteration_id_type current_iteration_id;

   typedef int32_t _current_goal_id_type;
  _current_goal_id_type current_goal_id;

   typedef uint8_t _is_current_goal_scanned_type;
  _is_current_goal_scanned_type is_current_goal_scanned;

   typedef uint8_t _is_exploration_finished_type;
  _is_exploration_finished_type is_exploration_finished;





  typedef boost::shared_ptr< ::control_planner_interface::PlannerMsgs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::control_planner_interface::PlannerMsgs_<ContainerAllocator> const> ConstPtr;

}; // struct PlannerMsgs_

typedef ::control_planner_interface::PlannerMsgs_<std::allocator<void> > PlannerMsgs;

typedef boost::shared_ptr< ::control_planner_interface::PlannerMsgs > PlannerMsgsPtr;
typedef boost::shared_ptr< ::control_planner_interface::PlannerMsgs const> PlannerMsgsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::control_planner_interface::PlannerMsgs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::control_planner_interface::PlannerMsgs_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::control_planner_interface::PlannerMsgs_<ContainerAllocator1> & lhs, const ::control_planner_interface::PlannerMsgs_<ContainerAllocator2> & rhs)
{
  return lhs.current_iteration_id == rhs.current_iteration_id &&
    lhs.current_goal_id == rhs.current_goal_id &&
    lhs.is_current_goal_scanned == rhs.is_current_goal_scanned &&
    lhs.is_exploration_finished == rhs.is_exploration_finished;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::control_planner_interface::PlannerMsgs_<ContainerAllocator1> & lhs, const ::control_planner_interface::PlannerMsgs_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace control_planner_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::control_planner_interface::PlannerMsgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::control_planner_interface::PlannerMsgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control_planner_interface::PlannerMsgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control_planner_interface::PlannerMsgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_planner_interface::PlannerMsgs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_planner_interface::PlannerMsgs_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::control_planner_interface::PlannerMsgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8d4c2f6dbcc43449d62d74babfc48846";
  }

  static const char* value(const ::control_planner_interface::PlannerMsgs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8d4c2f6dbcc43449ULL;
  static const uint64_t static_value2 = 0xd62d74babfc48846ULL;
};

template<class ContainerAllocator>
struct DataType< ::control_planner_interface::PlannerMsgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "control_planner_interface/PlannerMsgs";
  }

  static const char* value(const ::control_planner_interface::PlannerMsgs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::control_planner_interface::PlannerMsgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"int32 current_iteration_id\n"
"int32 current_goal_id   \n"
"bool is_current_goal_scanned\n"
"bool is_exploration_finished\n"
;
  }

  static const char* value(const ::control_planner_interface::PlannerMsgs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::control_planner_interface::PlannerMsgs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.current_iteration_id);
      stream.next(m.current_goal_id);
      stream.next(m.is_current_goal_scanned);
      stream.next(m.is_exploration_finished);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PlannerMsgs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::control_planner_interface::PlannerMsgs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::control_planner_interface::PlannerMsgs_<ContainerAllocator>& v)
  {
    s << indent << "current_iteration_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.current_iteration_id);
    s << indent << "current_goal_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.current_goal_id);
    s << indent << "is_current_goal_scanned: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_current_goal_scanned);
    s << indent << "is_exploration_finished: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_exploration_finished);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROL_PLANNER_INTERFACE_MESSAGE_PLANNERMSGS_H
