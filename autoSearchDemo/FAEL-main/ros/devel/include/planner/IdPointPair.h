// Generated by gencpp from file planner/IdPointPair.msg
// DO NOT EDIT!


#ifndef PLANNER_MESSAGE_IDPOINTPAIR_H
#define PLANNER_MESSAGE_IDPOINTPAIR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace planner
{
template <class ContainerAllocator>
struct IdPointPair_
{
  typedef IdPointPair_<ContainerAllocator> Type;

  IdPointPair_()
    : id(0)
    , point()  {
    }
  IdPointPair_(const ContainerAllocator& _alloc)
    : id(0)
    , point(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _point_type;
  _point_type point;





  typedef boost::shared_ptr< ::planner::IdPointPair_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::planner::IdPointPair_<ContainerAllocator> const> ConstPtr;

}; // struct IdPointPair_

typedef ::planner::IdPointPair_<std::allocator<void> > IdPointPair;

typedef boost::shared_ptr< ::planner::IdPointPair > IdPointPairPtr;
typedef boost::shared_ptr< ::planner::IdPointPair const> IdPointPairConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::planner::IdPointPair_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::planner::IdPointPair_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::planner::IdPointPair_<ContainerAllocator1> & lhs, const ::planner::IdPointPair_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.point == rhs.point;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::planner::IdPointPair_<ContainerAllocator1> & lhs, const ::planner::IdPointPair_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace planner

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::planner::IdPointPair_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planner::IdPointPair_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planner::IdPointPair_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planner::IdPointPair_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planner::IdPointPair_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planner::IdPointPair_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::planner::IdPointPair_<ContainerAllocator> >
{
  static const char* value()
  {
    return "039fd761ab13b0a87ce0c7bb4c023250";
  }

  static const char* value(const ::planner::IdPointPair_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x039fd761ab13b0a8ULL;
  static const uint64_t static_value2 = 0x7ce0c7bb4c023250ULL;
};

template<class ContainerAllocator>
struct DataType< ::planner::IdPointPair_<ContainerAllocator> >
{
  static const char* value()
  {
    return "planner/IdPointPair";
  }

  static const char* value(const ::planner::IdPointPair_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::planner::IdPointPair_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 id\n"
"geometry_msgs/Point point\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::planner::IdPointPair_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::planner::IdPointPair_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.point);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IdPointPair_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::planner::IdPointPair_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::planner::IdPointPair_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "point: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.point);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLANNER_MESSAGE_IDPOINTPAIR_H
