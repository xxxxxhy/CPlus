// Generated by gencpp from file ufomap_msgs/AABB.msg
// DO NOT EDIT!


#ifndef UFOMAP_MSGS_MESSAGE_AABB_H
#define UFOMAP_MSGS_MESSAGE_AABB_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ufomap_msgs/Point.h>
#include <ufomap_msgs/Point.h>

namespace ufomap_msgs
{
template <class ContainerAllocator>
struct AABB_
{
  typedef AABB_<ContainerAllocator> Type;

  AABB_()
    : center()
    , half_size()  {
    }
  AABB_(const ContainerAllocator& _alloc)
    : center(_alloc)
    , half_size(_alloc)  {
  (void)_alloc;
    }



   typedef  ::ufomap_msgs::Point_<ContainerAllocator>  _center_type;
  _center_type center;

   typedef  ::ufomap_msgs::Point_<ContainerAllocator>  _half_size_type;
  _half_size_type half_size;





  typedef boost::shared_ptr< ::ufomap_msgs::AABB_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ufomap_msgs::AABB_<ContainerAllocator> const> ConstPtr;

}; // struct AABB_

typedef ::ufomap_msgs::AABB_<std::allocator<void> > AABB;

typedef boost::shared_ptr< ::ufomap_msgs::AABB > AABBPtr;
typedef boost::shared_ptr< ::ufomap_msgs::AABB const> AABBConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ufomap_msgs::AABB_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ufomap_msgs::AABB_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ufomap_msgs::AABB_<ContainerAllocator1> & lhs, const ::ufomap_msgs::AABB_<ContainerAllocator2> & rhs)
{
  return lhs.center == rhs.center &&
    lhs.half_size == rhs.half_size;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ufomap_msgs::AABB_<ContainerAllocator1> & lhs, const ::ufomap_msgs::AABB_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ufomap_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ufomap_msgs::AABB_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ufomap_msgs::AABB_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ufomap_msgs::AABB_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ufomap_msgs::AABB_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ufomap_msgs::AABB_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ufomap_msgs::AABB_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ufomap_msgs::AABB_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4a91d419c2baa82eb1e98d52b2c2f149";
  }

  static const char* value(const ::ufomap_msgs::AABB_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4a91d419c2baa82eULL;
  static const uint64_t static_value2 = 0xb1e98d52b2c2f149ULL;
};

template<class ContainerAllocator>
struct DataType< ::ufomap_msgs::AABB_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ufomap_msgs/AABB";
  }

  static const char* value(const ::ufomap_msgs::AABB_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ufomap_msgs::AABB_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ufomap_msgs/Point center\n"
"\n"
"ufomap_msgs/Point half_size\n"
"================================================================================\n"
"MSG: ufomap_msgs/Point\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::ufomap_msgs::AABB_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ufomap_msgs::AABB_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.center);
      stream.next(m.half_size);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AABB_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ufomap_msgs::AABB_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ufomap_msgs::AABB_<ContainerAllocator>& v)
  {
    s << indent << "center: ";
    s << std::endl;
    Printer< ::ufomap_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.center);
    s << indent << "half_size: ";
    s << std::endl;
    Printer< ::ufomap_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.half_size);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UFOMAP_MSGS_MESSAGE_AABB_H
