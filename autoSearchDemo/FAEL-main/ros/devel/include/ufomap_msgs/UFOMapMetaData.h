// Generated by gencpp from file ufomap_msgs/UFOMapMetaData.msg
// DO NOT EDIT!


#ifndef UFOMAP_MSGS_MESSAGE_UFOMAPMETADATA_H
#define UFOMAP_MSGS_MESSAGE_UFOMAPMETADATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ufomap_msgs/BoundingVolume.h>

namespace ufomap_msgs
{
template <class ContainerAllocator>
struct UFOMapMetaData_
{
  typedef UFOMapMetaData_<ContainerAllocator> Type;

  UFOMapMetaData_()
    : version()
    , id()
    , resolution(0.0)
    , depth_levels(0)
    , compressed(false)
    , uncompressed_data_size(0)
    , bounding_volume()  {
    }
  UFOMapMetaData_(const ContainerAllocator& _alloc)
    : version(_alloc)
    , id(_alloc)
    , resolution(0.0)
    , depth_levels(0)
    , compressed(false)
    , uncompressed_data_size(0)
    , bounding_volume(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _version_type;
  _version_type version;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _id_type;
  _id_type id;

   typedef double _resolution_type;
  _resolution_type resolution;

   typedef uint8_t _depth_levels_type;
  _depth_levels_type depth_levels;

   typedef uint8_t _compressed_type;
  _compressed_type compressed;

   typedef int32_t _uncompressed_data_size_type;
  _uncompressed_data_size_type uncompressed_data_size;

   typedef  ::ufomap_msgs::BoundingVolume_<ContainerAllocator>  _bounding_volume_type;
  _bounding_volume_type bounding_volume;





  typedef boost::shared_ptr< ::ufomap_msgs::UFOMapMetaData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ufomap_msgs::UFOMapMetaData_<ContainerAllocator> const> ConstPtr;

}; // struct UFOMapMetaData_

typedef ::ufomap_msgs::UFOMapMetaData_<std::allocator<void> > UFOMapMetaData;

typedef boost::shared_ptr< ::ufomap_msgs::UFOMapMetaData > UFOMapMetaDataPtr;
typedef boost::shared_ptr< ::ufomap_msgs::UFOMapMetaData const> UFOMapMetaDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ufomap_msgs::UFOMapMetaData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ufomap_msgs::UFOMapMetaData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ufomap_msgs::UFOMapMetaData_<ContainerAllocator1> & lhs, const ::ufomap_msgs::UFOMapMetaData_<ContainerAllocator2> & rhs)
{
  return lhs.version == rhs.version &&
    lhs.id == rhs.id &&
    lhs.resolution == rhs.resolution &&
    lhs.depth_levels == rhs.depth_levels &&
    lhs.compressed == rhs.compressed &&
    lhs.uncompressed_data_size == rhs.uncompressed_data_size &&
    lhs.bounding_volume == rhs.bounding_volume;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ufomap_msgs::UFOMapMetaData_<ContainerAllocator1> & lhs, const ::ufomap_msgs::UFOMapMetaData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ufomap_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ufomap_msgs::UFOMapMetaData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ufomap_msgs::UFOMapMetaData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ufomap_msgs::UFOMapMetaData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ufomap_msgs::UFOMapMetaData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ufomap_msgs::UFOMapMetaData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ufomap_msgs::UFOMapMetaData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ufomap_msgs::UFOMapMetaData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3469fb65109a0fe2f8055afe98d145fa";
  }

  static const char* value(const ::ufomap_msgs::UFOMapMetaData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3469fb65109a0fe2ULL;
  static const uint64_t static_value2 = 0xf8055afe98d145faULL;
};

template<class ContainerAllocator>
struct DataType< ::ufomap_msgs::UFOMapMetaData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ufomap_msgs/UFOMapMetaData";
  }

  static const char* value(const ::ufomap_msgs::UFOMapMetaData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ufomap_msgs::UFOMapMetaData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# File version used\n"
"string version\n"
"\n"
"# Class id of the contained Octree\n"
"string id\n"
"\n"
"# Resolution (in m) of the octree leaf nodes\n"
"float64 resolution\n"
"\n"
"# Number of depth levels\n"
"uint8 depth_levels\n"
"\n"
"# If data is compressed\n"
"bool compressed\n"
"\n"
"# Size of data uncompressed\n"
"int32 uncompressed_data_size\n"
"\n"
"# Bounding volume\n"
"ufomap_msgs/BoundingVolume bounding_volume\n"
"================================================================================\n"
"MSG: ufomap_msgs/BoundingVolume\n"
"ufomap_msgs/AABB[] aabbs\n"
"\n"
"# ufomap_msgs/Capsule[] capsules\n"
"\n"
"# ufomap_msgs/Cone[] cones\n"
"\n"
"# ufomap_msgs/Cylinder[] cylinders\n"
"\n"
"# ufomap_msgs/Ellipsoid[] ellipsoids\n"
"\n"
"ufomap_msgs/Frustum[] frustums\n"
"\n"
"ufomap_msgs/LineSegment[] line_segments\n"
"\n"
"ufomap_msgs/OBB[] obbs\n"
"\n"
"ufomap_msgs/Plane[] planes\n"
"\n"
"ufomap_msgs/Point[] points\n"
"\n"
"ufomap_msgs/Ray[] rays\n"
"\n"
"ufomap_msgs/Sphere[] spheres\n"
"\n"
"# ufomap_msgs/Triangle[] triangles\n"
"================================================================================\n"
"MSG: ufomap_msgs/AABB\n"
"ufomap_msgs/Point center\n"
"\n"
"ufomap_msgs/Point half_size\n"
"================================================================================\n"
"MSG: ufomap_msgs/Point\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: ufomap_msgs/Frustum\n"
"ufomap_msgs/Plane[6] planes\n"
"================================================================================\n"
"MSG: ufomap_msgs/Plane\n"
"ufomap_msgs/Point normal\n"
"\n"
"float64 distance\n"
"================================================================================\n"
"MSG: ufomap_msgs/LineSegment\n"
"ufomap_msgs/Point start\n"
"\n"
"ufomap_msgs/Point end\n"
"================================================================================\n"
"MSG: ufomap_msgs/OBB\n"
"ufomap_msgs/Point center\n"
"\n"
"ufomap_msgs/Point half_size\n"
"\n"
"ufomap_msgs/Point rotation\n"
"================================================================================\n"
"MSG: ufomap_msgs/Ray\n"
"ufomap_msgs/Point origin\n"
"\n"
"ufomap_msgs/Point direction\n"
"================================================================================\n"
"MSG: ufomap_msgs/Sphere\n"
"ufomap_msgs/Point center\n"
"\n"
"float64 radius\n"
;
  }

  static const char* value(const ::ufomap_msgs::UFOMapMetaData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ufomap_msgs::UFOMapMetaData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.version);
      stream.next(m.id);
      stream.next(m.resolution);
      stream.next(m.depth_levels);
      stream.next(m.compressed);
      stream.next(m.uncompressed_data_size);
      stream.next(m.bounding_volume);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UFOMapMetaData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ufomap_msgs::UFOMapMetaData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ufomap_msgs::UFOMapMetaData_<ContainerAllocator>& v)
  {
    s << indent << "version: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.version);
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.id);
    s << indent << "resolution: ";
    Printer<double>::stream(s, indent + "  ", v.resolution);
    s << indent << "depth_levels: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.depth_levels);
    s << indent << "compressed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.compressed);
    s << indent << "uncompressed_data_size: ";
    Printer<int32_t>::stream(s, indent + "  ", v.uncompressed_data_size);
    s << indent << "bounding_volume: ";
    s << std::endl;
    Printer< ::ufomap_msgs::BoundingVolume_<ContainerAllocator> >::stream(s, indent + "  ", v.bounding_volume);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UFOMAP_MSGS_MESSAGE_UFOMAPMETADATA_H
