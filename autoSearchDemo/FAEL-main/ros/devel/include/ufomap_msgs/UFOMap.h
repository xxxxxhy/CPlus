// Generated by gencpp from file ufomap_msgs/UFOMap.msg
// DO NOT EDIT!


#ifndef UFOMAP_MSGS_MESSAGE_UFOMAP_H
#define UFOMAP_MSGS_MESSAGE_UFOMAP_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ufomap_msgs/UFOMapMetaData.h>

namespace ufomap_msgs
{
template <class ContainerAllocator>
struct UFOMap_
{
  typedef UFOMap_<ContainerAllocator> Type;

  UFOMap_()
    : info()
    , data()  {
    }
  UFOMap_(const ContainerAllocator& _alloc)
    : info(_alloc)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef  ::ufomap_msgs::UFOMapMetaData_<ContainerAllocator>  _info_type;
  _info_type info;

   typedef std::vector<int8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int8_t>> _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::ufomap_msgs::UFOMap_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ufomap_msgs::UFOMap_<ContainerAllocator> const> ConstPtr;

}; // struct UFOMap_

typedef ::ufomap_msgs::UFOMap_<std::allocator<void> > UFOMap;

typedef boost::shared_ptr< ::ufomap_msgs::UFOMap > UFOMapPtr;
typedef boost::shared_ptr< ::ufomap_msgs::UFOMap const> UFOMapConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ufomap_msgs::UFOMap_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ufomap_msgs::UFOMap_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ufomap_msgs::UFOMap_<ContainerAllocator1> & lhs, const ::ufomap_msgs::UFOMap_<ContainerAllocator2> & rhs)
{
  return lhs.info == rhs.info &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ufomap_msgs::UFOMap_<ContainerAllocator1> & lhs, const ::ufomap_msgs::UFOMap_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ufomap_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ufomap_msgs::UFOMap_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ufomap_msgs::UFOMap_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ufomap_msgs::UFOMap_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ufomap_msgs::UFOMap_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ufomap_msgs::UFOMap_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ufomap_msgs::UFOMap_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ufomap_msgs::UFOMap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6853af3d2dbb0ca48ce44c3720af1cca";
  }

  static const char* value(const ::ufomap_msgs::UFOMap_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6853af3d2dbb0ca4ULL;
  static const uint64_t static_value2 = 0x8ce44c3720af1ccaULL;
};

template<class ContainerAllocator>
struct DataType< ::ufomap_msgs::UFOMap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ufomap_msgs/UFOMap";
  }

  static const char* value(const ::ufomap_msgs::UFOMap_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ufomap_msgs::UFOMap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# A 3D map in binary format, as Octree\n"
"ufomap_msgs/UFOMapMetaData info\n"
"\n"
"# Binary serialization of Octree, use conversions.h to read and write octrees\n"
"int8[] data\n"
"================================================================================\n"
"MSG: ufomap_msgs/UFOMapMetaData\n"
"# File version used\n"
"string version\n"
"\n"
"# Class id of the contained Octree\n"
"string id\n"
"\n"
"# Resolution (in m) of the octree leaf nodes\n"
"float64 resolution\n"
"\n"
"# Number of depth levels\n"
"uint8 depth_levels\n"
"\n"
"# If data is compressed\n"
"bool compressed\n"
"\n"
"# Size of data uncompressed\n"
"int32 uncompressed_data_size\n"
"\n"
"# Bounding volume\n"
"ufomap_msgs/BoundingVolume bounding_volume\n"
"================================================================================\n"
"MSG: ufomap_msgs/BoundingVolume\n"
"ufomap_msgs/AABB[] aabbs\n"
"\n"
"# ufomap_msgs/Capsule[] capsules\n"
"\n"
"# ufomap_msgs/Cone[] cones\n"
"\n"
"# ufomap_msgs/Cylinder[] cylinders\n"
"\n"
"# ufomap_msgs/Ellipsoid[] ellipsoids\n"
"\n"
"ufomap_msgs/Frustum[] frustums\n"
"\n"
"ufomap_msgs/LineSegment[] line_segments\n"
"\n"
"ufomap_msgs/OBB[] obbs\n"
"\n"
"ufomap_msgs/Plane[] planes\n"
"\n"
"ufomap_msgs/Point[] points\n"
"\n"
"ufomap_msgs/Ray[] rays\n"
"\n"
"ufomap_msgs/Sphere[] spheres\n"
"\n"
"# ufomap_msgs/Triangle[] triangles\n"
"================================================================================\n"
"MSG: ufomap_msgs/AABB\n"
"ufomap_msgs/Point center\n"
"\n"
"ufomap_msgs/Point half_size\n"
"================================================================================\n"
"MSG: ufomap_msgs/Point\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: ufomap_msgs/Frustum\n"
"ufomap_msgs/Plane[6] planes\n"
"================================================================================\n"
"MSG: ufomap_msgs/Plane\n"
"ufomap_msgs/Point normal\n"
"\n"
"float64 distance\n"
"================================================================================\n"
"MSG: ufomap_msgs/LineSegment\n"
"ufomap_msgs/Point start\n"
"\n"
"ufomap_msgs/Point end\n"
"================================================================================\n"
"MSG: ufomap_msgs/OBB\n"
"ufomap_msgs/Point center\n"
"\n"
"ufomap_msgs/Point half_size\n"
"\n"
"ufomap_msgs/Point rotation\n"
"================================================================================\n"
"MSG: ufomap_msgs/Ray\n"
"ufomap_msgs/Point origin\n"
"\n"
"ufomap_msgs/Point direction\n"
"================================================================================\n"
"MSG: ufomap_msgs/Sphere\n"
"ufomap_msgs/Point center\n"
"\n"
"float64 radius\n"
;
  }

  static const char* value(const ::ufomap_msgs::UFOMap_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ufomap_msgs::UFOMap_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.info);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UFOMap_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ufomap_msgs::UFOMap_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ufomap_msgs::UFOMap_<ContainerAllocator>& v)
  {
    s << indent << "info: ";
    s << std::endl;
    Printer< ::ufomap_msgs::UFOMapMetaData_<ContainerAllocator> >::stream(s, indent + "  ", v.info);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // UFOMAP_MSGS_MESSAGE_UFOMAP_H
