// Generated by gencpp from file ufomap_srvs/ResetRequest.msg
// DO NOT EDIT!


#ifndef UFOMAP_SRVS_MESSAGE_RESETREQUEST_H
#define UFOMAP_SRVS_MESSAGE_RESETREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ufomap_srvs
{
template <class ContainerAllocator>
struct ResetRequest_
{
  typedef ResetRequest_<ContainerAllocator> Type;

  ResetRequest_()
    : new_resolution(0.0)
    , new_depth_levels(0)  {
    }
  ResetRequest_(const ContainerAllocator& _alloc)
    : new_resolution(0.0)
    , new_depth_levels(0)  {
  (void)_alloc;
    }



   typedef double _new_resolution_type;
  _new_resolution_type new_resolution;

   typedef uint8_t _new_depth_levels_type;
  _new_depth_levels_type new_depth_levels;





  typedef boost::shared_ptr< ::ufomap_srvs::ResetRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ufomap_srvs::ResetRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ResetRequest_

typedef ::ufomap_srvs::ResetRequest_<std::allocator<void> > ResetRequest;

typedef boost::shared_ptr< ::ufomap_srvs::ResetRequest > ResetRequestPtr;
typedef boost::shared_ptr< ::ufomap_srvs::ResetRequest const> ResetRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ufomap_srvs::ResetRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ufomap_srvs::ResetRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ufomap_srvs::ResetRequest_<ContainerAllocator1> & lhs, const ::ufomap_srvs::ResetRequest_<ContainerAllocator2> & rhs)
{
  return lhs.new_resolution == rhs.new_resolution &&
    lhs.new_depth_levels == rhs.new_depth_levels;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ufomap_srvs::ResetRequest_<ContainerAllocator1> & lhs, const ::ufomap_srvs::ResetRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ufomap_srvs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ufomap_srvs::ResetRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ufomap_srvs::ResetRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ufomap_srvs::ResetRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ufomap_srvs::ResetRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ufomap_srvs::ResetRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ufomap_srvs::ResetRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ufomap_srvs::ResetRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "17d290cc8fb3818820766caab01dd3f5";
  }

  static const char* value(const ::ufomap_srvs::ResetRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x17d290cc8fb38188ULL;
  static const uint64_t static_value2 = 0x20766caab01dd3f5ULL;
};

template<class ContainerAllocator>
struct DataType< ::ufomap_srvs::ResetRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ufomap_srvs/ResetRequest";
  }

  static const char* value(const ::ufomap_srvs::ResetRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ufomap_srvs::ResetRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Resets the complete map.\n"
"\n"
"# The resolution of the new map\n"
"float64 new_resolution\n"
"# The number of depth levels in the new map\n"
"uint8 new_depth_levels\n"
;
  }

  static const char* value(const ::ufomap_srvs::ResetRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ufomap_srvs::ResetRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.new_resolution);
      stream.next(m.new_depth_levels);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ResetRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ufomap_srvs::ResetRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ufomap_srvs::ResetRequest_<ContainerAllocator>& v)
  {
    s << indent << "new_resolution: ";
    Printer<double>::stream(s, indent + "  ", v.new_resolution);
    s << indent << "new_depth_levels: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.new_depth_levels);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UFOMAP_SRVS_MESSAGE_RESETREQUEST_H
