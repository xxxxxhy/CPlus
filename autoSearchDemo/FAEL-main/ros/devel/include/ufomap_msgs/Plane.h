// Generated by gencpp from file ufomap_msgs/Plane.msg
// DO NOT EDIT!


#ifndef UFOMAP_MSGS_MESSAGE_PLANE_H
#define UFOMAP_MSGS_MESSAGE_PLANE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ufomap_msgs/Point.h>

namespace ufomap_msgs
{
template <class ContainerAllocator>
struct Plane_
{
  typedef Plane_<ContainerAllocator> Type;

  Plane_()
    : normal()
    , distance(0.0)  {
    }
  Plane_(const ContainerAllocator& _alloc)
    : normal(_alloc)
    , distance(0.0)  {
  (void)_alloc;
    }



   typedef  ::ufomap_msgs::Point_<ContainerAllocator>  _normal_type;
  _normal_type normal;

   typedef double _distance_type;
  _distance_type distance;





  typedef boost::shared_ptr< ::ufomap_msgs::Plane_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ufomap_msgs::Plane_<ContainerAllocator> const> ConstPtr;

}; // struct Plane_

typedef ::ufomap_msgs::Plane_<std::allocator<void> > Plane;

typedef boost::shared_ptr< ::ufomap_msgs::Plane > PlanePtr;
typedef boost::shared_ptr< ::ufomap_msgs::Plane const> PlaneConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ufomap_msgs::Plane_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ufomap_msgs::Plane_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ufomap_msgs::Plane_<ContainerAllocator1> & lhs, const ::ufomap_msgs::Plane_<ContainerAllocator2> & rhs)
{
  return lhs.normal == rhs.normal &&
    lhs.distance == rhs.distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ufomap_msgs::Plane_<ContainerAllocator1> & lhs, const ::ufomap_msgs::Plane_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ufomap_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ufomap_msgs::Plane_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ufomap_msgs::Plane_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ufomap_msgs::Plane_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ufomap_msgs::Plane_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ufomap_msgs::Plane_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ufomap_msgs::Plane_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ufomap_msgs::Plane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "546b8465a41443f1e6383b45dd22a458";
  }

  static const char* value(const ::ufomap_msgs::Plane_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x546b8465a41443f1ULL;
  static const uint64_t static_value2 = 0xe6383b45dd22a458ULL;
};

template<class ContainerAllocator>
struct DataType< ::ufomap_msgs::Plane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ufomap_msgs/Plane";
  }

  static const char* value(const ::ufomap_msgs::Plane_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ufomap_msgs::Plane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ufomap_msgs/Point normal\n"
"\n"
"float64 distance\n"
"================================================================================\n"
"MSG: ufomap_msgs/Point\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::ufomap_msgs::Plane_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ufomap_msgs::Plane_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.normal);
      stream.next(m.distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Plane_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ufomap_msgs::Plane_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ufomap_msgs::Plane_<ContainerAllocator>& v)
  {
    s << indent << "normal: ";
    s << std::endl;
    Printer< ::ufomap_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.normal);
    s << indent << "distance: ";
    Printer<double>::stream(s, indent + "  ", v.distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UFOMAP_MSGS_MESSAGE_PLANE_H
