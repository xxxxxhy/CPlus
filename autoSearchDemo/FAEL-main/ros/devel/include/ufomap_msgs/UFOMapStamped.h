// Generated by gencpp from file ufomap_msgs/UFOMapStamped.msg
// DO NOT EDIT!


#ifndef UFOMAP_MSGS_MESSAGE_UFOMAPSTAMPED_H
#define UFOMAP_MSGS_MESSAGE_UFOMAPSTAMPED_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <ufomap_msgs/UFOMap.h>

namespace ufomap_msgs
{
template <class ContainerAllocator>
struct UFOMapStamped_
{
  typedef UFOMapStamped_<ContainerAllocator> Type;

  UFOMapStamped_()
    : header()
    , map()  {
    }
  UFOMapStamped_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , map(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::ufomap_msgs::UFOMap_<ContainerAllocator>  _map_type;
  _map_type map;





  typedef boost::shared_ptr< ::ufomap_msgs::UFOMapStamped_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ufomap_msgs::UFOMapStamped_<ContainerAllocator> const> ConstPtr;

}; // struct UFOMapStamped_

typedef ::ufomap_msgs::UFOMapStamped_<std::allocator<void> > UFOMapStamped;

typedef boost::shared_ptr< ::ufomap_msgs::UFOMapStamped > UFOMapStampedPtr;
typedef boost::shared_ptr< ::ufomap_msgs::UFOMapStamped const> UFOMapStampedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ufomap_msgs::UFOMapStamped_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ufomap_msgs::UFOMapStamped_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ufomap_msgs::UFOMapStamped_<ContainerAllocator1> & lhs, const ::ufomap_msgs::UFOMapStamped_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.map == rhs.map;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ufomap_msgs::UFOMapStamped_<ContainerAllocator1> & lhs, const ::ufomap_msgs::UFOMapStamped_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ufomap_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ufomap_msgs::UFOMapStamped_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ufomap_msgs::UFOMapStamped_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ufomap_msgs::UFOMapStamped_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ufomap_msgs::UFOMapStamped_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ufomap_msgs::UFOMapStamped_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ufomap_msgs::UFOMapStamped_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ufomap_msgs::UFOMapStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4e6ca7ef43516fb3a0c22c889b3897eb";
  }

  static const char* value(const ::ufomap_msgs::UFOMapStamped_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4e6ca7ef43516fb3ULL;
  static const uint64_t static_value2 = 0xa0c22c889b3897ebULL;
};

template<class ContainerAllocator>
struct DataType< ::ufomap_msgs::UFOMapStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ufomap_msgs/UFOMapStamped";
  }

  static const char* value(const ::ufomap_msgs::UFOMapStamped_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ufomap_msgs::UFOMapStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"ufomap_msgs/UFOMap map\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: ufomap_msgs/UFOMap\n"
"# A 3D map in binary format, as Octree\n"
"ufomap_msgs/UFOMapMetaData info\n"
"\n"
"# Binary serialization of Octree, use conversions.h to read and write octrees\n"
"int8[] data\n"
"================================================================================\n"
"MSG: ufomap_msgs/UFOMapMetaData\n"
"# File version used\n"
"string version\n"
"\n"
"# Class id of the contained Octree\n"
"string id\n"
"\n"
"# Resolution (in m) of the octree leaf nodes\n"
"float64 resolution\n"
"\n"
"# Number of depth levels\n"
"uint8 depth_levels\n"
"\n"
"# If data is compressed\n"
"bool compressed\n"
"\n"
"# Size of data uncompressed\n"
"int32 uncompressed_data_size\n"
"\n"
"# Bounding volume\n"
"ufomap_msgs/BoundingVolume bounding_volume\n"
"================================================================================\n"
"MSG: ufomap_msgs/BoundingVolume\n"
"ufomap_msgs/AABB[] aabbs\n"
"\n"
"# ufomap_msgs/Capsule[] capsules\n"
"\n"
"# ufomap_msgs/Cone[] cones\n"
"\n"
"# ufomap_msgs/Cylinder[] cylinders\n"
"\n"
"# ufomap_msgs/Ellipsoid[] ellipsoids\n"
"\n"
"ufomap_msgs/Frustum[] frustums\n"
"\n"
"ufomap_msgs/LineSegment[] line_segments\n"
"\n"
"ufomap_msgs/OBB[] obbs\n"
"\n"
"ufomap_msgs/Plane[] planes\n"
"\n"
"ufomap_msgs/Point[] points\n"
"\n"
"ufomap_msgs/Ray[] rays\n"
"\n"
"ufomap_msgs/Sphere[] spheres\n"
"\n"
"# ufomap_msgs/Triangle[] triangles\n"
"================================================================================\n"
"MSG: ufomap_msgs/AABB\n"
"ufomap_msgs/Point center\n"
"\n"
"ufomap_msgs/Point half_size\n"
"================================================================================\n"
"MSG: ufomap_msgs/Point\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: ufomap_msgs/Frustum\n"
"ufomap_msgs/Plane[6] planes\n"
"================================================================================\n"
"MSG: ufomap_msgs/Plane\n"
"ufomap_msgs/Point normal\n"
"\n"
"float64 distance\n"
"================================================================================\n"
"MSG: ufomap_msgs/LineSegment\n"
"ufomap_msgs/Point start\n"
"\n"
"ufomap_msgs/Point end\n"
"================================================================================\n"
"MSG: ufomap_msgs/OBB\n"
"ufomap_msgs/Point center\n"
"\n"
"ufomap_msgs/Point half_size\n"
"\n"
"ufomap_msgs/Point rotation\n"
"================================================================================\n"
"MSG: ufomap_msgs/Ray\n"
"ufomap_msgs/Point origin\n"
"\n"
"ufomap_msgs/Point direction\n"
"================================================================================\n"
"MSG: ufomap_msgs/Sphere\n"
"ufomap_msgs/Point center\n"
"\n"
"float64 radius\n"
;
  }

  static const char* value(const ::ufomap_msgs::UFOMapStamped_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ufomap_msgs::UFOMapStamped_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.map);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UFOMapStamped_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ufomap_msgs::UFOMapStamped_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ufomap_msgs::UFOMapStamped_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "map: ";
    s << std::endl;
    Printer< ::ufomap_msgs::UFOMap_<ContainerAllocator> >::stream(s, indent + "  ", v.map);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UFOMAP_MSGS_MESSAGE_UFOMAPSTAMPED_H
